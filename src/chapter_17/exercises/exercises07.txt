/*********************************************************
 * From C PROGRAMMING: A MODERN APPROACH, Second Edition *
 * By K. N. King                                         *
 * Copyright (c) 2008, 1996 W. W. Norton & Company, Inc. *
 * All rights reserved.                                  *
 * This program may be freely distributed for class use, *
 * provided that this copyright notice is retained.      *
 *********************************************************/

/*␣exercises07.txt␣(Chapter␣17,␣page␣454)␣*/↲

7. [was #8] The first call of free will release the space for the first node in the list, making p a dangling pointer.
Executing p = p->next to advance to the next node will have an undefined effect. Here's a correct way to write the loop,
using a temporary pointer that points to the node being deleted:

struct node *temp;

p = first;
while (p != NULL) {
  temp = p;
  p = p->next;
  free(temp);
}
