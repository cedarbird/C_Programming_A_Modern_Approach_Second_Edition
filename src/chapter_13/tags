!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
EXPRESSION_LEN	projects15.c	20;"	d	file:
LENGTH_ALPHABETS	projects13.c	19;"	d	file:
LENGTH_ALPHABETS	projects14.c	17;"	d	file:
MAX_CHARS	projects12.c	18;"	d	file:
MAX_LENGTH	projects13.c	18;"	d	file:
MAX_LENGTH	projects15.c	19;"	d	file:
MAX_REMIND	projects02a.c	16;"	d	file:
MAX_REMIND	projects02b.c	16;"	d	file:
MAX_REMIND	projects02c.c	16;"	d	file:
MAX_REMIND	remind.c	16;"	d	file:
MAX_WORDS	projects12.c	17;"	d	file:
MSG_LEN	projects02a.c	17;"	d	file:
MSG_LEN	projects02b.c	17;"	d	file:
MSG_LEN	projects02c.c	17;"	d	file:
MSG_LEN	projects16.c	16;"	d	file:
MSG_LEN	projects17.c	19;"	d	file:
MSG_LEN	remind.c	17;"	d	file:
N	projects09.c	16;"	d	file:
N	projects10.c	17;"	d	file:
N	projects11.c	17;"	d	file:
NUM_CHARS	projects14.c	18;"	d	file:
NUM_PLANETS	planet.c	16;"	d	file:
NUM_PLANETS	projects06.c	17;"	d	file:
NUM_RANKS	projects03.c	19;"	d	file:
NUM_SUITS	projects03.c	18;"	d	file:
STACK_SIZE	projects15.c	18;"	d	file:
WORD_LEN	projects01.c	16;"	d	file:
are_anagrams	projects14.c	/^bool are_anagrams(const char *word1, const char *word2)$/;"	f
build_index_url	exercises13.c	/^void build_index_url(char *domain, char *index_url)$/;"	f
capitalize	exercises05a.c	/^char *capitalize(char *s)$/;"	f
capitalize	exercises05b.c	/^char *capitalize(char *s)$/;"	f
censor	exercises06.c	/^void censor(char s[])$/;"	f
compute_average_word_length	projects11.c	/^double compute_average_word_length(const char *sentence)$/;"	f
compute_scrabble_value	projects08.c	/^int compute_scrabble_value(const char *word)$/;"	f
compute_vowel_count	projects09.c	/^int compute_vowel_count(const char *sentence)$/;"	f
count_spaces	exercises16.c	/^int count_spaces(const char *s)$/;"	f
encrypt	projects13.c	/^void encrypt(char *message, int shift)$/;"	f
evaluate_RPN_expression	projects15.c	/^int evaluate_RPN_expression(const char *expression)$/;"	f
get_extension	exercises12.c	/^void get_extension(char *file_name, char *extension)$/;"	f
is_empty	projects15.c	/^bool is_empty(void)$/;"	f
is_full	projects15.c	/^bool is_full(void)$/;"	f
is_palindrome	projects17.c	/^bool is_palindrome(const char *messages)$/;"	f
main	exercises01.c	/^int main(void)$/;"	f
main	exercises03.c	/^int main(void)$/;"	f
main	exercises05a.c	/^int main(void)$/;"	f
main	exercises05b.c	/^int main(void)$/;"	f
main	exercises06.c	/^int main(void)$/;"	f
main	exercises09.c	/^int main(void)$/;"	f
main	exercises11.c	/^int main(void)$/;"	f
main	exercises12.c	/^int main(void)$/;"	f
main	exercises13.c	/^int main(void)$/;"	f
main	exercises14.c	/^int main(void)$/;"	f
main	exercises16.c	/^int main(void)$/;"	f
main	exercises17.c	/^int main(void)$/;"	f
main	exercises18.c	/^int main(void)$/;"	f
main	planet.c	/^int main(int argc, char *argv[])$/;"	f
main	projects01.c	/^int main(void)$/;"	f
main	projects02a.c	/^int main(void)$/;"	f
main	projects02b.c	/^int main(void)$/;"	f
main	projects02c.c	/^int main(void)$/;"	f
main	projects03.c	/^int main(void)$/;"	f
main	projects04.c	/^int main(int argc, char *argv[])$/;"	f
main	projects05.c	/^int main(int argc, char *argv[])$/;"	f
main	projects06.c	/^int main(int argc, char *argv[])$/;"	f
main	projects07.c	/^int main(void)$/;"	f
main	projects08.c	/^int main(void)$/;"	f
main	projects09.c	/^int main(void)$/;"	f
main	projects10.c	/^int main(void)$/;"	f
main	projects11.c	/^int main(void)$/;"	f
main	projects12.c	/^int main(void)$/;"	f
main	projects13.c	/^int main(void)$/;"	f
main	projects14.c	/^int main(void)$/;"	f
main	projects15.c	/^int main(void)$/;"	f
main	projects16.c	/^int main(void)$/;"	f
main	projects17.c	/^int main(void)$/;"	f
main	projects18.c	/^int main(void)$/;"	f
main	remind.c	/^int main(void)$/;"	f
make_empty	projects15.c	/^void make_empty(void)$/;"	f
mystrcmp	exercises11.c	/^int mystrcmp(char *s, char *t)$/;"	f
pop	projects15.c	/^int pop(void)$/;"	f
push	projects15.c	/^void push(int digit)$/;"	f
read_line	projects01.c	/^void read_line(char str[], int n)$/;"	f
read_line	projects02a.c	/^int read_line(char str[], int n)$/;"	f
read_line	projects02b.c	/^int read_line(char str[], int n)$/;"	f
read_line	projects02c.c	/^int read_line(char str[], int n)$/;"	f
read_line	projects09.c	/^int read_line(char str[], int n)$/;"	f
read_line	projects10.c	/^int read_line(char str[], int n)$/;"	f
read_line	projects11.c	/^int read_line(char str[], int n)$/;"	f
read_line	projects13.c	/^int read_line(char str[], int n)$/;"	f
read_line	projects14.c	/^int read_line(char str[], int n)$/;"	f
read_line	projects15.c	/^int read_line(char str[], int n)$/;"	f
read_line	projects16.c	/^int read_line(char str[], int n)$/;"	f
read_line	projects17.c	/^int read_line(char str[], int n)$/;"	f
read_line	remind.c	/^int read_line(char str[], int n)$/;"	f
read_word	projects12.c	/^char read_word(char *word)$/;"	f
remove_filename	exercises18.c	/^void remove_filename(char *url)$/;"	f
reverse	projects16.c	/^void reverse(char *messages)$/;"	f
reverse_name	projects10.c	/^void reverse_name(char *name)$/;"	f
rpn	projects15.c	/^int rpn[STACK_SIZE];$/;"	v
stack_overflow	projects15.c	/^void stack_overflow(void)$/;"	f
stack_underflow	projects15.c	/^void stack_underflow(void)$/;"	f
string_equal	projects06.c	/^int string_equal(const char *s, const char *t)$/;"	f
test_extension	exercises17.c	/^bool test_extension(char *file_name, char *extension)$/;"	f
top	projects15.c	/^int top = 0;$/;"	v
