!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
CC	Makefile	/^CC=gcc$/;"	m
HEIGHT	projects07.c	19;"	d	file:
MAX_LENGTH	projects06.c	19;"	d	file:
MAX_NUMBER	guess.c	17;"	d	file:
MAX_NUMBER	guess2.c	17;"	d	file:
MKDIR	Makefile	/^MKDIR=mkdir$/;"	m
NUM_CARDS	poker.c	19;"	d	file:
NUM_CARDS	projects02.c	19;"	d	file:
NUM_CARDS	projects03.c	17;"	d	file:
NUM_CARDS	projects04.c	19;"	d	file:
NUM_CARDS	projects05.c	19;"	d	file:
NUM_DECIMALS	projects07.c	16;"	d	file:
NUM_DIGITS	projects07.c	18;"	d	file:
NUM_RANKS	poker.c	17;"	d	file:
NUM_RANKS	projects02.c	17;"	d	file:
NUM_RANKS	projects04.c	17;"	d	file:
NUM_RANKS	projects05.c	17;"	d	file:
NUM_SEGMENTS	projects07.c	17;"	d	file:
NUM_SUITS	poker.c	18;"	d	file:
NUM_SUITS	projects02.c	18;"	d	file:
NUM_SUITS	projects04.c	18;"	d	file:
NUM_SUITS	projects05.c	18;"	d	file:
OPTIONS	Makefile	/^OPTIONS=-O -Wall -W -pedantic -ansi -std=c99 -o$/;"	m
RANK	projects03.c	18;"	d	file:
RM	Makefile	/^RM=rm$/;"	m
SHELL	Makefile	/^SHELL=\/bin\/sh$/;"	m
STACK_SIZE	projects01.c	17;"	d	file:
STACK_SIZE	projects06.c	18;"	d	file:
SUIT	projects03.c	19;"	d	file:
WIDTH	projects07.c	20;"	d	file:
analyze_hand	poker.c	/^void analyze_hand(void)$/;"	f
analyze_hand	projects02.c	/^void analyze_hand(int num_in_rank[NUM_RANKS], int num_in_suit[NUM_SUITS])$/;"	f
analyze_hand	projects03.c	/^void analyze_hand(void)$/;"	f
analyze_hand	projects04.c	/^void analyze_hand(void)$/;"	f
analyze_hand	projects05.c	/^void analyze_hand(void)$/;"	f
choose_new_secret_number	guess.c	/^void choose_new_secret_number(void)$/;"	f
clear_digits_array	projects07.c	/^void clear_digits_array(void)$/;"	f
contents	projects01.c	/^char contents[STACK_SIZE];$/;"	v
digits	projects07.c	/^char digits[HEIGHT][NUM_DIGITS * WIDTH];$/;"	v
display_mark	projects07.c	/^char display_mark[NUM_SEGMENTS] = {'_', '|', '|', '_', '|', '|', '_'};$/;"	v
display_position	projects07.c	/^int display_position[NUM_SEGMENTS][2] = {{0, 1}, {1, 2}, {2, 2},$/;"	v
flush	poker.c	/^bool straight, flush, four, three;$/;"	v
flush	projects02.c	/^bool straight, flush, four, three;$/;"	v
flush	projects03.c	/^bool straight, flush, four, three;$/;"	v
flush	projects04.c	/^bool royal, straight, flush, four, three;$/;"	v
flush	projects05.c	/^bool straight, flush, four, three;$/;"	v
four	poker.c	/^bool straight, flush, four, three;$/;"	v
four	projects02.c	/^bool straight, flush, four, three;$/;"	v
four	projects03.c	/^bool straight, flush, four, three;$/;"	v
four	projects04.c	/^bool royal, straight, flush, four, three;$/;"	v
four	projects05.c	/^bool straight, flush, four, three;$/;"	v
hand	projects03.c	/^int hand[NUM_CARDS][2];$/;"	v
initialize_number_generator	guess.c	/^void initialize_number_generator(void)$/;"	f
initialize_number_generator	guess2.c	/^void initialize_number_generator(void)$/;"	f
is_empty	projects01.c	/^bool is_empty(void)$/;"	f
is_empty	projects06.c	/^bool is_empty(void)$/;"	f
is_full	projects01.c	/^bool is_full(void)$/;"	f
is_full	projects06.c	/^bool is_full(void)$/;"	f
main	guess.c	/^int main(void)$/;"	f
main	guess2.c	/^int main(void)$/;"	f
main	poker.c	/^int main(void)$/;"	f
main	projects01.c	/^int main(void)$/;"	f
main	projects02.c	/^int main(void)$/;"	f
main	projects03.c	/^int main(void)$/;"	f
main	projects04.c	/^int main(void)$/;"	f
main	projects05.c	/^int main(void)$/;"	f
main	projects06.c	/^int main(void)$/;"	f
main	projects07.c	/^int main(void)$/;"	f
make_empty	projects01.c	/^void make_empty(void)$/;"	f
make_empty	projects06.c	/^void make_empty(void)$/;"	f
new_secret_number	guess2.c	/^int new_secret_number(void)$/;"	f
num_in_rank	poker.c	/^int num_in_rank[NUM_RANKS];$/;"	v
num_in_rank	projects04.c	/^int num_in_rank[NUM_RANKS];$/;"	v
num_in_rank	projects05.c	/^int num_in_rank[NUM_RANKS];$/;"	v
num_in_suit	poker.c	/^int num_in_suit[NUM_SUITS];$/;"	v
num_in_suit	projects04.c	/^int num_in_suit[NUM_SUITS];$/;"	v
num_in_suit	projects05.c	/^int num_in_suit[NUM_SUITS];$/;"	v
out_of_range	projects01.c	/^bool out_of_range = false;$/;"	v
pairs	poker.c	/^int pairs;   \/* can be 0, 1, or 2 *\/$/;"	v
pairs	projects02.c	/^int pairs;   \/* can be 0, 1, or 2 *\/$/;"	v
pairs	projects03.c	/^int pairs;   \/* can be 0, 1, or 2 *\/$/;"	v
pairs	projects04.c	/^int pairs;   \/* can be 0, 1, or 2 *\/$/;"	v
pairs	projects05.c	/^int pairs;   \/* can be 0, 1, or 2 *\/$/;"	v
pop	projects01.c	/^char pop(void)$/;"	f
pop	projects06.c	/^int pop(void)$/;"	f
print_digits_array	projects07.c	/^void print_digits_array(void)$/;"	f
print_result	poker.c	/^void print_result(void)$/;"	f
print_result	projects02.c	/^void print_result()$/;"	f
print_result	projects03.c	/^void print_result(void)$/;"	f
print_result	projects04.c	/^void print_result(void)$/;"	f
print_result	projects05.c	/^void print_result(void)$/;"	f
process_digit	projects07.c	/^void process_digit(int digit, int position)$/;"	f
push	projects01.c	/^void push(char ch)$/;"	f
push	projects06.c	/^void push(int digit)$/;"	f
read_cards	poker.c	/^void read_cards(void)$/;"	f
read_cards	projects02.c	/^void read_cards(int num_in_rank[NUM_RANKS], int num_in_suit[NUM_SUITS])$/;"	f
read_cards	projects03.c	/^void read_cards(void)$/;"	f
read_cards	projects04.c	/^void read_cards(void)$/;"	f
read_cards	projects05.c	/^void read_cards(void)$/;"	f
read_guesses	guess.c	/^void read_guesses(void)$/;"	f
read_guesses	guess2.c	/^void read_guesses(int secret_number)$/;"	f
royal	projects04.c	/^bool royal, straight, flush, four, three;$/;"	v
rpn	projects06.c	/^int rpn[STACK_SIZE];$/;"	v
secret_number	guess.c	/^int secret_number;$/;"	v
segments	projects07.c	/^int segments[NUM_DECIMALS][NUM_SEGMENTS] = {{1, 1, 1, 1, 1, 1, 0},$/;"	v
stack_overflow	projects01.c	/^void stack_overflow(void)$/;"	f
stack_overflow	projects06.c	/^void stack_overflow(void)$/;"	f
stack_underflow	projects01.c	/^void stack_underflow(void)$/;"	f
stack_underflow	projects06.c	/^void stack_underflow(void)$/;"	f
straight	poker.c	/^bool straight, flush, four, three;$/;"	v
straight	projects02.c	/^bool straight, flush, four, three;$/;"	v
straight	projects03.c	/^bool straight, flush, four, three;$/;"	v
straight	projects04.c	/^bool royal, straight, flush, four, three;$/;"	v
straight	projects05.c	/^bool straight, flush, four, three;$/;"	v
three	poker.c	/^bool straight, flush, four, three;$/;"	v
three	projects02.c	/^bool straight, flush, four, three;$/;"	v
three	projects03.c	/^bool straight, flush, four, three;$/;"	v
three	projects04.c	/^bool royal, straight, flush, four, three;$/;"	v
three	projects05.c	/^bool straight, flush, four, three;$/;"	v
top	projects01.c	/^int top = 0;$/;"	v
top	projects06.c	/^int top = 0;$/;"	v
