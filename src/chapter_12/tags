!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
CC	Makefile	/^CC=gcc$/;"	m
LENGTH	projects05.c	17;"	d	file:
MKDIR	Makefile	/^MKDIR=mkdir$/;"	m
MSG_LEN	projects01a.c	15;"	d	file:
MSG_LEN	projects01b.c	15;"	d	file:
MSG_LEN	projects02a.c	18;"	d	file:
MSG_LEN	projects02b.c	18;"	d	file:
MSG_LEN	projects03.c	15;"	d	file:
MSG_LEN	projects04.c	18;"	d	file:
N	exercises03.c	14;"	d	file:
N	exercises13.c	14;"	d	file:
N	exercises15.c	14;"	d	file:
N	projects06.c	15;"	d	file:
N	projects07.c	15;"	d	file:
N	reverse3.c	15;"	d	file:
OPTIONS	Makefile	/^OPTIONS=-O -Wall -W -pedantic -ansi -std=c99 -o$/;"	m
RM	Makefile	/^RM=rm$/;"	m
SHELL	Makefile	/^SHELL=\/bin\/sh$/;"	m
evaluate_position	exercises18.c	/^int evaluate_position(char *board, int n)$/;"	f
find_largest	exercises11.c	/^int find_largest(int a[], int n)$/;"	f
find_largest	exercises16.c	/^int find_largest(int *a, int n)$/;"	f
find_middle	exercises10.c	/^int *find_middle(int a[], int n)$/;"	f
find_two_largest	exercises12.c	/^void find_two_largest(const int *a, int n, int *largest,$/;"	f
ident	exercises13.c	/^double ident[N][N];$/;"	v
initial_matrix	exercises13.c	/^void initial_matrix(void)$/;"	f
initial_temperatures	exercises16.c	/^void initial_temperatures(int *a, int n)$/;"	f
inner_product	exercises09.c	/^double inner_product(const double *a, const double *b, int n)$/;"	f
main	exercises03.c	/^int main(void)$/;"	f
main	exercises06.c	/^int main(void)$/;"	f
main	exercises07.c	/^int main(void)$/;"	f
main	exercises08.c	/^int main(void)$/;"	f
main	exercises09.c	/^int main(void)$/;"	f
main	exercises10.c	/^int main(void)$/;"	f
main	exercises11.c	/^int main(void)$/;"	f
main	exercises12.c	/^int main(void)$/;"	f
main	exercises13.c	/^int main(void)$/;"	f
main	exercises14.c	/^int main(void)$/;"	f
main	exercises15.c	/^int main(void)$/;"	f
main	exercises16.c	/^int main(void)$/;"	f
main	exercises17.c	/^int main(void)$/;"	f
main	exercises18.c	/^int main(void)$/;"	f
main	projects01a.c	/^int main(void)$/;"	f
main	projects01b.c	/^int main(void)$/;"	f
main	projects02a.c	/^int main(void)$/;"	f
main	projects02b.c	/^int main(void)$/;"	f
main	projects03.c	/^int main(void)$/;"	f
main	projects04.c	/^int main(void)$/;"	f
main	projects05.c	/^int main(void)$/;"	f
main	projects06.c	/^int main(void)$/;"	f
main	projects07.c	/^int main(void)$/;"	f
main	reverse3.c	/^int main(void)$/;"	f
max_min	projects07.c	/^void max_min(int a[], int n, int *max, int *min)$/;"	f
quicksort	projects06.c	/^void quicksort(int *low, int *high)$/;"	f
search	exercises07.c	/^bool search(const int a[], int n, int key)$/;"	f
search	exercises14.c	/^void search(const int *a, int n, int temperature, int *pindex, int *num)$/;"	f
split	projects06.c	/^int *split(int *low, int *high)$/;"	f
store_zeros	exercises08.c	/^void store_zeros(int a[], int n)$/;"	f
sum_array	exercises06.c	/^int sum_array(const int a[], int n)$/;"	f
sum_two_dimentional_array	exercises17.c	/^int sum_two_dimentional_array(int *a, int n)$/;"	f
